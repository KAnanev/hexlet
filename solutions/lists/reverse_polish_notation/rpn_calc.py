"""

В данном упражнении необходимо реализовать стековую машину,
то есть алгоритм, проводящий вычисления по обратной польской записи.

Обратная польская нотация или постфиксная нотация — форма записи
математических и логических выражений, в которой операнды расположены
перед знаками операций. Выражение читается слева направо.
Когда в выражении встречается знак операции, выполняется соответствующая
операция над двумя ближайшими операндами, находящимися слева от знака операции.
Результат операции заменяет в выражении последовательность её операндов и знак,
после чего выражение вычисляется дальше по тому же правилу. Таким образом,
результатом вычисления всего выражения становится результат последней вычисленной операции.

Например, выражение (1 + 2) * 4 + 3 в постфиксной нотации будет выглядеть так: 1 2 + 4 * 3 +,
а результат вычисления: 15. Другой пример - выражение: 7 - 2 * 3, в постфиксной нотации:
7 2 3 * -, результат: 1.

>>> rpn_calc([1, 2, '+', 4, '*', 3, '+'])
15
>>> rpn_calc([7, 2, 3, '*', '-'])
1
>>>

"""

import operator

OPERATORS = {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.truediv}


def rpn_calc(array):
    tmp_arr = []

    for i, item in enumerate(array):
        if isinstance(item, int):
            tmp_arr.append(item)
        else:
            num_1, num_2 = tmp_arr.pop(), tmp_arr.pop()
            tmp_arr.append(OPERATORS[item](num_2, num_1))
    return tmp_arr.pop()
